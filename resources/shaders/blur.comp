layout(local_size_x = 32, local_size_y = 32) in;
layout(binding = 0) uniform sampler2D img_input;
layout(rgba32f, binding = 1) uniform image2D img_output;

// linear sampling blur shader from rastergrid
// https://rastergrid.com/blog/2010/09/efficient-gaussian-blur-with-linear-sampling/
 
uniform float offset[3] = float[](0.0, 1.3846153846, 3.2307692308);
uniform float weight[3] = float[](0.2270270270, 0.3162162162, 0.0702702703);
uniform bool horizontal = false;
 
void main(void) {

    vec2 coords = vec2(gl_GlobalInvocationID.xy);
    vec2 texSize = textureSize(img_input, 0) - vec2(1,1);
    if(any(greaterThan(coords, texSize)))
        return;

    vec4 pixel = texture(img_input, coords/texSize) * weight[0];

    if(horizontal) {

        for (int i=1; i<3; i++) {

            pixel += texture(img_input, (coords + vec2(0, offset[i]))/texSize) * weight[i];
            pixel += texture(img_input, (coords - vec2(0, offset[i]))/texSize) * weight[i];
        }
    } else {

        for (int i=1; i<3; i++) {

            pixel += texture(img_input, (coords + vec2(offset[i], 0))/texSize) * weight[i];
            pixel += texture(img_input, (coords - vec2(offset[i], 0))/texSize) * weight[i];
        }
    }

    imageStore(img_output, ivec2(gl_GlobalInvocationID.xy), pixel);
}