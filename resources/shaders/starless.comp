layout(local_size_x = 32, local_size_y = 32) in;
layout(rgba32f, binding = 0) uniform image2D img_output;

#ifdef SKY
layout(binding = 0) uniform samplerCube cubeMap;
#endif //SKY

#ifdef BLOOM
layout(rgba32f, binding = 1) uniform image2D bloom_output;
#endif //BLOOM

uniform float stepSize;
uniform float M;
uniform vec3 baseColor;
uniform mat4 quadCamInfo;

vec3 starless(vec3 pos, float h2){
    return -3 * h2 * M * pos / pow(dot(pos, pos), 2.5);
}

void write_to_tex(ivec2 coords, vec4 pixel, bool disk) {
    pixel.a = 1;
    imageStore(img_output, coords, pixel);
    #ifdef BLOOM
    if(disk && dot(pixel.rgb, vec3(0.7, 0.6, 0.07)) > 1.0) {
        imageStore(bloom_output, coords, pixel);
    } else {
        imageStore(bloom_output, coords, vec4(0,0,0,1));
    }

    /*
    if(dot(pixel.rgb, vec3(0.1, 0.6, 0.07)) > 1.0)
        imageStore(bloom_output, coords, pixel);
    else
    */
    #endif // BLOOM
}

void main() {
    // compute ray direction
    //vec2(gl_GlobalInvocationID.xy)/vec2(gl_NumWorkGroups.xy);
    ivec2 texCoords = ivec2(gl_GlobalInvocationID.xy);
    vec2 texDim = imageSize(img_output);
    if(any(greaterThanEqual(texCoords, texDim)))
        return;
    vec2 coords = vec2(gl_GlobalInvocationID.xy)/texDim;

    vec3 posX1 = vec3((1.0 - coords.x) * quadCamInfo[0] + coords.x * quadCamInfo[2]);
    vec3 posX2 = vec3((1.0 - coords.x) * quadCamInfo[1] + coords.x * quadCamInfo[3]);
    vec3 pixel_pos = (1.0 - coords.y) * posX1 + coords.y * posX2;

    vec3 cameraPos = vec3(quadCamInfo[0][3], quadCamInfo[1][3], quadCamInfo[2][3]);
  
    vec3 viewDir = normalize(pixel_pos - cameraPos);
  
    vec4 pixel = vec4(0,0,0,0);
    vec4 diskColor;

    bool disk = false;

    float rs = 2.0 * M;
    float dotP = dot(normalize(-cameraPos), viewDir);
    float dist = length(dotP * length(cameraPos) * viewDir + cameraPos);
    // stop if lightray is pointing directly to black hole
    #ifndef DISK
    #ifdef RAYDIRTEST
    if(dotP >= 0 && abs(dist) <= rs) return;
    #endif //RAYDIRTEST
    #endif

    #ifdef EHSIZE
    // theoretical apparent EH size
    if(dotP >= 0 && abs(dist) <= 2.6 * rs) {
        pixel = vec4(0.5,0.5,0.5,0.5);
        //return;
    }
    #endif // EHSIZE
    
    vec3 lightPos = cameraPos;
    vec3 lightVel = viewDir;
    vec3 lightup = cross(cameraPos, lightVel);
    float h2 = dot(lightup, lightup);

    #ifdef FIRSTRK4
    if(length(lightPos) > 100.0) {
        float stp = length(lightPos) - 100.0;
        vec3 k1 = starless(lightPos, h2);
        vec3 k2 = starless(lightPos + 0.5 * stp * k1, h2);
        vec3 k3 = starless(lightPos + 0.5 * stp * k2, h2);
        vec3 k4 = starless(lightPos + stp * k3, h2);

        lightVel += stp/6.0 * (k1 + 2*k2 + 2*k3 + k4);
        lightPos += stp * lightVel;

        #ifdef DISK
        if(diskIntersect(lightPos, -stp*lightVel, diskColor)){
            pixel.rgb += (1.0 - pixel.a) * diskColor.rgb * diskColor.a;
            pixel.a += diskColor.a;
            disk = true;
        }
        #endif //DISK

    }
    #endif //FIRSTRK4


    // simple loop for now
    float step = stepSize;
    for(int i = 0; i < 100; ++i) {

        #ifdef ADPTSTEP
        step = max(0.0001, stepSize * (length(lightPos) - rs));
        #endif //ADPTSTEP

        if(length(lightPos) <= rs){
        #ifdef CHECKEREDHOR
            vec4 horizonColor;
            horizonIntersect (lightPos, -lightVel*step, rs, horizonColor);
            pixel.rgb += (1.0 - pixel.a) * horizonColor.rgb;
        #endif //CHECKEREDHOR
            write_to_tex(texCoords, pixel, disk);
            return;
        }

        vec3 acc = starless(lightPos, h2);
        #ifdef ERLYTERM
        if (dot(-lightPos, lightVel) < 0 && 
            length(acc*step) <= length(lightVel) * 0.001) {
            break;
        }
        #endif //ERLYTERM
        lightVel += acc * step;
        lightPos += lightVel * step;
         
        #ifdef DISK
        if (diskIntersect(lightPos, -step*lightVel, diskColor)) {
            pixel.rgb += (1.0 - pixel.a) * diskColor.rgb * diskColor.a;
            pixel.a += diskColor.a;
            disk = true;
            if(pixel.a > 0.99){
                write_to_tex(texCoords, pixel, disk);
                return;
            }
        }
        #endif //DISK
    }

    #ifdef SKY
    pixel.rgb += (1.0-pixel.a) * texture(cubeMap, lightVel).rgb;
    #else
    pixel.rgb += (1.0-pixel.a) * abs(normalize(lightVel));
    #endif //SKY
    
    write_to_tex(texCoords, pixel, disk);
}